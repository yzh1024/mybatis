<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTO Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
namespace:确定该方法哪一个dao接口
id:确定哪个方法
resultType：表示我们要封装到哪里去
parameterType:参数的类型
-->
<mapper namespace="dao.IUserDao">

    <!--sql标签：抽取重复的sql语句-->
    <sql id="defaultUser">
        select * from user
    </sql>

    <!--配置查询所有-->
    <select id="findAll" resultType="User">
        <include refid="defaultUser"></include>
        -- select * from user
    </select>

    <!--保存（增加）用户-->
    <insert id="saveUser" parameterType="User">
        -- 配置插入操作后，获取插入数据的id
        <selectKey keyProperty="id" keyColumn="id" resultType="int" order="AFTER">
            -- 其中keyColumn是数据库里面的id,order是执行的时间（先做还是后做）
            select last_insert_id();
        </selectKey>
        insert into user(username,address,sex,birthday)values(#{username},#{address},#{sex},#{birthday});
    </insert>

    <!--修改用户信息（更新）-->
    <update id="updateUser" parameterType="User">
        update user set username = #{username},address=#{address},sex=#{sex},birthday=#{birthday} where id = #{id};
    </update>

    <!--删除用户-->
    <update id="deleteUser" parameterType="Integer">
        delete from user where id = #{uid}
    </update>


    <!--根据id查询单个用户-->
    <select id="findById" parameterType="Integer" resultType="User">
        select * from user where id = #{uid}
    </select>

    <!--根据名称模糊查询用户信息-->
    <select id="findByName" parameterType="String" resultType="User">
        select * from user where username like #{name}
    </select>

    <!--查询总用户数（聚合查询）-->
    <select id="findTotal" resultType="User">
        select count(id)from user;
    </select>

    <!--根据queryVo的条件查询用户-->
    <select id="findUserByVo" parameterType="QueryVo" resultType="User">
        select * from user where username like #{user.username}
    </select>

    <!--根据条件查询resultType="domain.User" -->
    <select id="findUserByCondition" resultType="User" parameterType="user">
        select * from user
        <where>
            <if test="username != null">
                and username = #{username}
            </if>
            <if test="sex != null ">
                and sex = #{sex}
            </if>
        </where>
    </select>

    <!--根据QueryVo中提供的id集合，查询用户信息-->
    <select id="findUserInIds" parameterType="QueryVo" resultType="User">
        select * from user
        <where>
            <if test="ids != null and ids.size()>0">
                <foreach collection="ids" open="and id in(" close=")" item="uid" separator=",">
                    #{uid}
                </foreach>
            </if>
        </where>
    </select>

</mapper>